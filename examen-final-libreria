const readlineSync = require('readline-sync');
const fs = require('fs');
const colors = require('colors');

let catalogo = [];

function mostrarMenu() {
  console.log('\n--- Menú Principal ---'.blue);
  console.log('1. Agregar libro');
  console.log('2. Mostrar catálogo');
  console.log('3. Buscar libro por título');
  console.log('4. Eliminar libro');
  console.log('5. Ver estadísticas');
  console.log('6. Ordenar libros');
  console.log('7. Editar libro');
  console.log('8. Salir');
}

function agregarLibro() {
  console.log('\n--- Agregar Libro ---'.green);
  let titulo = readlineSync.question('Titulo: ');
  let autor = readlineSync.question('Autor: ');
  let precio = parseFloat(readlineSync.question('Precio: '));
  let anio = parseInt(readlineSync.question('Año de publicacion: '));

  if (isNaN(precio) || precio <= 0 || isNaN(anio)) {
    console.log('Datos invalidos. Intenta de nuevo.'.red);
    return;
  }

  let libro = {
    titulo,
    autor,
    precio,
    anio
  };

  catalogo.push(libro);
  console.log('Libro agregado correctamente.'.green);
}

function mostrarCatalogo() {
  console.log('\n--- Catálogo de Libros ---'.cyan);
  if (catalogo.length === 0) {
    console.log('No hay libros en el catálogo.'.yellow);
  } else {
    catalogo.forEach((libro, i) => {
      console.log(`${i + 1}. ${libro.titulo} - ${libro.autor} - $${libro.precio} - ${libro.anio}`);
    });
  }
}

function buscarLibro() {
  let tituloBuscar = readlineSync.question('Ingrese el título del libro a buscar: ');
  let libro = catalogo.find(l => l.titulo.toLowerCase() === tituloBuscar.toLowerCase());

  if (libro) {
    console.log(`Encontrado: ${libro.titulo} - ${libro.autor} - $${libro.precio} - ${libro.anio}`.green);
  } else {
    console.log('Libro no encontrado.'.red);
  }
}

function eliminarLibro() {
  let tituloEliminar = readlineSync.question('Ingrese el título del libro a eliminar: ');
  let indice = catalogo.findIndex(l => l.titulo.toLowerCase() === tituloEliminar.toLowerCase());

  if (indice !== -1) {
    catalogo.splice(indice, 1);
    console.log('Libro eliminado correctamente.'.green);
  } else {
    console.log('Libro no encontrado.'.red);
  }
}

function verEstadisticas() {
  console.log('\n--- Estadísticas ---'.magenta);
  if (catalogo.length === 0) {
    console.log('No hay libros en el catálogo.'.yellow);
    return;
  }

  let totalLibros = catalogo.length;
  let precioPromedio = catalogo.reduce((acc, l) => acc + l.precio, 0) / totalLibros;
  let libroMasAntiguo = catalogo.reduce((a, b) => (a.anio < b.anio ? a : b));
  let libroMasCaro = catalogo.reduce((a, b) => (a.precio > b.precio ? a : b));

  console.log(`Total de libros: ${totalLibros}`);
  console.log(`Precio promedio: $${precioPromedio.toFixed(2)}`);
  console.log(`Libro más antiguo: ${libroMasAntiguo.titulo} (${libroMasAntiguo.anio})`);
  console.log(`Libro más caro: ${libroMasCaro.titulo} ($${libroMasCaro.precio})`);
}

function ordenarLibros() {
  console.log('Ordenar por:');
  console.log('1. Precio Ascendente');
  console.log('2. Precio Descendente');
  console.log('3. Año de publicación');
  let opcion = readlineSync.question('Opcion: ');

  if (opcion === '1') {
    catalogo.sort((a, b) => a.precio - b.precio);
    console.log('Ordenado por precio (ascendente).'.green);
  } else if (opcion === '2') {
    catalogo.sort((a, b) => b.precio - a.precio);
    console.log('Ordenado por precio (descendente).'.green);
  } else if (opcion === '3') {
    catalogo.sort((a, b) => a.anio - b.anio);
    console.log('Ordenado por año.'.green);
  } else {
    console.log('Opción inválida.'.red);
  }
}

function editarLibro() {
  let tituloEditar = readlineSync.question('Ingrese el título del libro a editar: ');
  let libro = catalogo.find(l => l.titulo.toLowerCase() === tituloEditar.toLowerCase());

  if (!libro) {
    console.log('Libro no encontrado.'.red);
    return;
  }

  console.log('Deje vacío si no desea cambiar el dato.');
  let nuevoTitulo = readlineSync.question(`Nuevo título (${libro.titulo}): `) || libro.titulo;
  let nuevoAutor = readlineSync.question(`Nuevo autor (${libro.autor}): `) || libro.autor;
  let nuevoPrecio = readlineSync.question(`Nuevo precio (${libro.precio}): `);
  let nuevoAnio = readlineSync.question(`Nuevo año (${libro.anio}): `);

  libro.titulo = nuevoTitulo;
  libro.autor = nuevoAutor;
  if (!isNaN(parseFloat(nuevoPrecio))) libro.precio = parseFloat(nuevoPrecio);
  if (!isNaN(parseInt(nuevoAnio))) libro.anio = parseInt(nuevoAnio);

  console.log('Libro actualizado correctamente.'.green);
}

function guardarCatalogo() {
  fs.writeFileSync('catalogo.json', JSON.stringify(catalogo, null, 2));
  console.log('Catálogo guardado en archivo catalogo.json.'.blue);
}

function filtrarPorAutor() {
  let autorBuscar = readlineSync.question('Ingrese el autor a filtrar: ');
  let librosAutor = catalogo.filter(l => l.autor.toLowerCase() === autorBuscar.toLowerCase());

  if (librosAutor.length > 0) {
    console.log(`Libros de ${autorBuscar}:`);
    librosAutor.forEach(libro => {
      console.log(`${libro.titulo} - $${libro.precio} - ${libro.anio}`);
    });
  } else {
    console.log('No se encontraron libros de ese autor.'.red);
  }
}

// Menú principal
let salir = false;
while (!salir) {
  mostrarMenu();
  let opcion = readlineSync.question('Seleccione una opción: ');

  switch (opcion) {
    case '1':
      agregarLibro();
      break;
    case '2':
      mostrarCatalogo();
      break;
    case '3':
      buscarLibro();
      break;
    case '4':
      eliminarLibro();
      break;
    case '5':
      verEstadisticas();
      break;
    case '6':
      ordenarLibros();
      break;
    case '7':
      editarLibro();
      break;
    case '8':
      guardarCatalogo();
      salir = true;
      console.log('Programa finalizado. ¡Hasta luego!'.yellow);
      break;
    case '9':
      filtrarPorAutor(); // función extra
      break;
    default:
      console.log('Opción inválida.'.red);
  }

